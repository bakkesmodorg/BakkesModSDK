#pragma once
template<class T> class ArrayWrapper;
template<typename T> class StructArrayWrapper;
#include "../WrapperStructs.h"
#include ".././GameEvent/TeamGameEventWrapper.h"
class ControllerWrapper;
class PlayerControllerWrapper;
class CarWrapper;
class ReplayDirectorWrapper;
class TeamWrapper;
class ActorWrapper;
class PriWrapper;
class BallWrapper;
class GoalWrapper;

class BAKKESMOD_PLUGIN_IMPORT ServerWrapper : public TeamGameEventWrapper {
public:
	CONSTRUCTORS(ServerWrapper)

	//BEGIN SELF IMPLEMENTED
	BallWrapper GetBall();
	void SpawnCar(int32_t carBody, std::string name);
	void SpawnBot(int32_t carBody, std::string name);
	BallWrapper SpawnBall(const Vector position, bool wake, bool spawnCannon);
	bool HasAuthority();
	GETSETH(float, GameSpeed)
	GETSETH(float, SecondsElapsed)	
		
	CarWrapper GetGameCar();
	bool IsBallMovingTowardsGoal(int32_t goalNo, BallWrapper bw);
	bool IsInGoal(Vector vec);
	void DisableGoalReset();
	void EnableGoalReset();
	//void SpawnCar(int32_t body = 0);
	//Speed from 0 to 2000 pls
	Vector GenerateShot(Vector startPos, Vector destination, float speed);
	Vector GenerateGoalAimLocation(int32_t goalNumber, Vector currentBallLocation);
	Vector GetGoalExtent(int32_t goalNumber = 0);
	Vector GetGoalLocation(int32_t goalNumber = 0);//END SELF IMPLEMENTED
		//END SELF IMPLEMENTED

	//AUTO-GENERATED FROM FIELDS
	CarWrapper GetTestCarArchetype();
	void SetTestCarArchetype(CarWrapper newTestCarArchetype);
	BallWrapper GetBallArchetype();
	void SetBallArchetype(BallWrapper newBallArchetype);
	ActorWrapper GetBallSpawnPoint();
	void SetBallSpawnPoint(ActorWrapper newBallSpawnPoint);
	int32_t GetSeriesLength();
	void SetSeriesLength(int32_t newSeriesLength);
	int32_t GetGameTime();
	void SetGameTime(int32_t newGameTime);
	int32_t GetWarmupTime();
	void SetWarmupTime(int32_t newWarmupTime);
	int32_t GetMaxScore();
	void SetMaxScore(int32_t newMaxScore);
	int32_t GetAutoBalanceDifference();
	void SetAutoBalanceDifference(int32_t newAutoBalanceDifference);
	float GetScoreSlomoTime();
	void SetScoreSlomoTime(float newScoreSlomoTime);
	float GetGameTimeRemaining();
	void SetGameTimeRemaining(float newGameTimeRemaining);
	int32_t GetSecondsRemaining();
	void SetSecondsRemaining(int32_t newSecondsRemaining);
	int32_t GetWaitTimeRemaining();
	void SetWaitTimeRemaining(int32_t newWaitTimeRemaining);
	float GetTotalGameTimePlayed();
	void SetTotalGameTimePlayed(float newTotalGameTimePlayed);
	float GetOvertimeTimePlayed();
	void SetOvertimeTimePlayed(float newOvertimeTimePlayed);
	unsigned long GetbRoundActive();
	void SetbRoundActive(unsigned long newbRoundActive);
	unsigned long GetbPlayReplays();
	void SetbPlayReplays(unsigned long newbPlayReplays);
	unsigned long GetbBallHasBeenHit();
	void SetbBallHasBeenHit(unsigned long newbBallHasBeenHit);
	unsigned long GetbOverTime();
	void SetbOverTime(unsigned long newbOverTime);
	unsigned long GetbUnlimitedTime();
	void SetbUnlimitedTime(unsigned long newbUnlimitedTime);
	unsigned long GetbNoContest();
	void SetbNoContest(unsigned long newbNoContest);
	unsigned long GetbDisableGoalDelay();
	void SetbDisableGoalDelay(unsigned long newbDisableGoalDelay);
	unsigned long GetbShowNoScorerGoalMessage();
	void SetbShowNoScorerGoalMessage(unsigned long newbShowNoScorerGoalMessage);
	unsigned long GetbMatchEnded();
	void SetbMatchEnded(unsigned long newbMatchEnded);
	unsigned long GetbShowIntroScene();
	void SetbShowIntroScene(unsigned long newbShowIntroScene);
	unsigned long GetbClubMatch();
	void SetbClubMatch(unsigned long newbClubMatch);
	int32_t GetNextSpawnIndex();
	void SetNextSpawnIndex(int32_t newNextSpawnIndex);
	ReplayDirectorWrapper GetReplayDirectorArchetype();
	void SetReplayDirectorArchetype(ReplayDirectorWrapper newReplayDirectorArchetype);
	ReplayDirectorWrapper GetReplayDirector();
	void SetReplayDirector(ReplayDirectorWrapper newReplayDirector);
	ArrayWrapper<BallWrapper> GetGameBalls();
	int32_t GetTotalGameBalls();
	void SetTotalGameBalls(int32_t newTotalGameBalls);
	float GetPostGoalTime();
	void SetPostGoalTime(float newPostGoalTime);
	ArrayWrapper<GoalWrapper> GetGoals();
	int32_t GetSecondsRemainingCountdown();
	void SetSecondsRemainingCountdown(int32_t newSecondsRemainingCountdown);
	Vector GetFieldCenter();
	void SetFieldCenter(Vector newFieldCenter);
	TeamWrapper GetGameWinner();
	void SetGameWinner(TeamWrapper newGameWinner);
	TeamWrapper GetMatchWinner();
	void SetMatchWinner(TeamWrapper newMatchWinner);
	PriWrapper GetMVP();
	void SetMVP(PriWrapper newMVP);
	PriWrapper GetFastestGoalPlayer();
	void SetFastestGoalPlayer(PriWrapper newFastestGoalPlayer);
	PriWrapper GetSlowestGoalPlayer();
	void SetSlowestGoalPlayer(PriWrapper newSlowestGoalPlayer);
	PriWrapper GetFurthestGoalPlayer();
	void SetFurthestGoalPlayer(PriWrapper newFurthestGoalPlayer);
	float GetFastestGoalSpeed();
	void SetFastestGoalSpeed(float newFastestGoalSpeed);
	float GetSlowestGoalSpeed();
	void SetSlowestGoalSpeed(float newSlowestGoalSpeed);
	float GetFurthestGoal();
	void SetFurthestGoal(float newFurthestGoal);
	uint8_t GetReplicatedScoredOnTeam();
	void SetReplicatedScoredOnTeam(uint8_t newReplicatedScoredOnTeam);
	uint8_t GetReplicatedServerPerformanceState();
	void SetReplicatedServerPerformanceState(uint8_t newReplicatedServerPerformanceState);
	int32_t GetRoundNum();
	void SetRoundNum(int32_t newRoundNum);
	float GetAssistMaxTime();
	void SetAssistMaxTime(float newAssistMaxTime);
	float GetBallHasBeenHitStartDelay();
	void SetBallHasBeenHitStartDelay(float newBallHasBeenHitStartDelay);
	float GetPodiumDelay();
	void SetPodiumDelay(float newPodiumDelay);
	float GetPodiumTime();
	void SetPodiumTime(float newPodiumTime);
	int32_t GetLobbyEndCountdown();
	void SetLobbyEndCountdown(int32_t newLobbyEndCountdown);
	int32_t GetLobbyCountdown();
	void SetLobbyCountdown(int32_t newLobbyCountdown);
	float GetLobbyTime();
	void SetLobbyTime(float newLobbyTime);
	int32_t GetLobbySpawnRestartTime();
	void SetLobbySpawnRestartTime(int32_t newLobbySpawnRestartTime);
	PlayerControllerWrapper GetPauser();
	void SetPauser(PlayerControllerWrapper newPauser);

	//AUTO-GENERATED FUNCTION PROXIES
	int32_t GetPlayerCarCount();
	void ReplicateSkillTiers();
	void RemoveTeamSelection();
	void CheckStart();
	void StartLobbyTimer();
	void HandleCountdownTick();
	void CheckForCountdownAction();
	void LobbyCountdownTick();
	bool CanSpawnBots();
	void StartRound();
	void EndRound();
	void SetBallEventListeners(BallWrapper Ball, unsigned long bListen);
	bool CanAwardPoints();
	void HandleCarTouch(BallWrapper Ball, CarWrapper HitCar, uint8_t HitType);
	void SetBallHasBeenHit2();
	int32_t DetermineScoreTouchIndex(BallWrapper Ball, GoalWrapper Goal);
	int32_t DetermineAssistTouchIndex(BallWrapper Ball, int32_t ScoreIdx);
	void UpdateTotalGameTimePlayed(float DeltaTime);
	void UpdateGameTime(float DeltaTime);
	bool CanUpdateGameTime();
	void StartReplay();
	void HandleReplayFinished(ReplayDirectorWrapper InReplay);
	void GotoPodiumSpotlight();
	void UpdateSpotlight();
	void SpawnPodiumCars();
	bool CanEnableCarPodiumMovement();
	void FinishEvent();
	bool __GameEvent_Soccar_TA__UpdateTeamScores(TeamWrapper T);
	void __GameEvent_Soccar_TA__SubmitMatchComplete(PriWrapper PRI);
	void __GameEvent_Soccar_TA__CheckStart(TeamWrapper T);
	void __GameEvent_Soccar_TA__EndState(TeamWrapper T);
	void __ReplicatedServerPerformanceState__ChangeNotifyFunc();
	void __bClubMatch__ChangeNotifyFunc();
	void __bShowIntroScene__ChangeNotifyFunc();
	void __WaitTimeRemaining__ChangeNotifyFunc();
	void CheckJoinInProgress(PriWrapper PRI);
	bool AllowDynamicCrowd();
	void AddBallTrajectory(BallWrapper InBall);
	bool ShowScorerGoalMessage();
	bool CanUseBallCam();
	bool DisableStatXP();
	void SetDisableGoalDelay(unsigned long bInDisableGoalDelay);
	void ForceMatchStart();
	void RemoveLocalPlayer(PlayerControllerWrapper Player);
	void AddLocalPlayer(PlayerControllerWrapper Player);
	void DestroyGoalIndicators(PlayerControllerWrapper Player);
	void CreateGoalIndicators(PlayerControllerWrapper Player);
	void BeginHighlightsReplay();
	bool ShouldCountUp();
	bool ShouldAllowVoteToForfeit();
	bool ShouldHaveLeaveMatchPenalty();
	void SetPaused(PlayerControllerWrapper InPauser, unsigned long bInPaused);
	bool ShouldCountdownResumeFromPause();
	void SetScoreAndTime(PlayerControllerWrapper PC, int32_t NewScoreTeam0, int32_t NewScoreTeam1, int32_t InGameTimeRemaining, unsigned long bInOvertime, unsigned long bRestartRound);
	void SaveLocalPlayerStats();
	bool ShouldPlayReplay();
	bool ShouldRecordReplay();
	void OnBallHasBeenHit();
	BallWrapper SpawnBall2(Vector& SpawnLoc, unsigned long bWake, unsigned long bSpawnCannon, std::string BallArch);
	int32_t GetTotalScore();
	void HandleCarSet(PriWrapper InPRI);
    void RemovePlayer(ControllerWrapper Player);
	void RemovePRI(PriWrapper PRI);
	void AddPRI(PriWrapper PRI);
	void OnMatchWinnerSet();
	void OnGameWinnerSet();
	int32_t MVPSort(PriWrapper A, PriWrapper B);
	void HandleHitGoal(BallWrapper Ball, GoalWrapper Goal);
	void ClearReplicatedScoredOnTeam();
	void TriggerScoreChangedEvent();
	void HandleScoreUpdated(TeamWrapper Team);
	void OnAllTeamsCreated();
	void TriggerGoalScoreEvent(int32_t TeamScoredOn, CarWrapper Scorer);
	void SetTotalGameBalls2(int32_t TotalBalls);
	void RecordRecentPlayers();
	void UpdateStats();
	void NotifyKismetOfCurrentTime();
	bool EnoughTimePassedToForfeit();
	void OnGameTimeUpdated();
	void OnOvertimeUpdated();
	void ForceOvertime();
	void StartOvertime();
	bool OnMyHalf(Vector& TestLocation, uint8_t TeamNum);
	TeamWrapper GetWinningTeam();
	void ResetPickups();
	void ResetPlayers();
	void OnBallSpawned(BallWrapper NewBall);
	void ResetBalls();
	void DestroyCars();
	void FreezePawns();
	void DestroyBalls();
	void RemoveGameBall(BallWrapper Ball);
	void AddGameBall(BallWrapper Ball);
	void StartNewRound();
	void CheckForAutoBalance();
	bool HasWinner();
	void SubmitMatch2();
	void SubmitMatchComplete2();
	void OnMatchEnded();
	bool ShouldDoPodiumSpotlight();
	void EndGame();
	void UpdateTeamScores2();
	void StartNewGame();
	void ResetGame();
	void ClearReplicatedStatEvent();
	void eventDestroyed();
	void InitBotDetection();
	void InitCrowdManager();
	void InitField();
	void InitGameObserver();
	void OnInit();
	void InitMutators();
	void OnClubMatch();
	bool CanInitClubMatch();
	void AssignCustomTeamSettings();
	void InitGame2(std::string Options);
	std::string GetMatchGUID();
	void SetMatchGUID(std::string s);
	void EventGameWinnerSet(ServerWrapper GameEvent);
	void EventGoalScored(ServerWrapper GameEvent, BallWrapper Ball, GoalWrapper Goal, int32_t ScoreIndex, int32_t AssistIdx);
private:
	PIMPL
};